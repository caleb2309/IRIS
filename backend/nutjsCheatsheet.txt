ALWAYS RELEASE A KEY IMMEDIATELY AFTER IT IS PRESSED,THAT IS AFTER EVERY pressKey, call a releaseKey ESPECIALLY ALWAYS RELEASE THE WINDOWS KEY (LeftSuper key) AFTER IT IS PRESSED.
This document provides a detailed guide to nut.js, a cross-platform native UI automation tool. It is designed to teach an LLM how to generate correct and efficient nut.js code for automating desktop interactions on Windows 10 and 11.

**Crucial Note for LLM**: Your generated nut.js code (the action field) MUST NOT include require or import statements for nut-tree/nut-js or @nut-tree-fork/nut-js. Assume that mouse, keyboard, screen, clipboard, Button, Key, Point, Region, straightTo, centerOf, randomPointIn, left, right, up, down, and the delay function are already globally available and imported by the executor.


## üìê Coordinate System Basics
nut.js operates on a screen coordinate system where:

```
Screen Coordinates (0,0 = Top-Left)
(0,0) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ (width-1, 0)
  ‚îÇ                             ‚îÇ
  ‚îÇ                             ‚îÇ
  ‚îÇ          SCREEN             ‚îÇ
  ‚îÇ                             ‚îÇ
  ‚îÇ                             ‚îÇ
(0, height-1) ‚îÄ‚îÄ‚îÄ‚îÄ (width-1, height-1)
```

- **X-axis**: Increases going RIGHT ‚Üí
- **Y-axis**: Increases going DOWN ‚Üì  
- **Origin**: Top-left corner (0, 0)

## üñ±Ô∏è Core Component: mouse
The mouse object provides functions to control the mouse cursor and perform clicks. All mouse operations are asynchronous and must be awaited.

### Main Functions & Syntax:

#### `await mouse.move(movementFunction);`
**Purpose**: Moves the mouse cursor using a movement function that defines the path and destination.

**CRITICAL**: You CANNOT use arrays like `[x, y]` or objects like `{x: 500, y: 300}` directly. You must use movement functions:

**Absolute Movement**:
```javascript
await mouse.move(straightTo(new Point(x, y)));
```

**Examples**:
```javascript
// Move to absolute coordinates (500, 300)
await mouse.move(straightTo(new Point(500, 300)));

// Move to center of a region
const targetRegion = new Region(100, 100, 200, 200);
await mouse.move(straightTo(centerOf(targetRegion)));

// Move to random point within a region
await mouse.move(straightTo(randomPointIn(targetRegion)));
```

**Relative Movement**:
```javascript
await mouse.move(left(pixels));    // Move left
await mouse.move(right(pixels));   // Move right  
await mouse.move(up(pixels));      // Move up
await mouse.move(down(pixels));    // Move down
```

**Examples**:
```javascript
// Move 50 pixels right from current position
await mouse.move(right(50));

// Move 25 pixels up from current position  
await mouse.move(up(25));

// Move diagonally: 30 pixels left, then 40 pixels down
await mouse.move(left(30));
await delay(0.1);
await mouse.move(down(40));
```

#### `await mouse.click(button: Button = Button.LEFT);`
**Purpose**: Performs a single click with the specified mouse button at the current cursor position.

**Parameters**: 
- `button`: Use `Button.LEFT`, `Button.RIGHT`, or `Button.MIDDLE`. Defaults to `Button.LEFT`.

**Examples**:
```javascript
await mouse.click(Button.LEFT);   // Left click
await mouse.click(Button.RIGHT);  // Right click
await mouse.click();              // Left click (default)
```

#### `await mouse.doubleClick(button: Button = Button.LEFT);`
**Purpose**: Performs a double-click with the specified mouse button at the current cursor position.

**Example**:
```javascript
await mouse.doubleClick(); // Left double-click
await mouse.doubleClick(Button.RIGHT); // Right double-click
```

#### `await mouse.pressButton(button: Button);` & `await mouse.releaseButton(button: Button);`
**Purpose**: Press and hold, or release mouse buttons. Useful for drag operations.

**Examples**:
```javascript
await mouse.pressButton(Button.LEFT);
// ... move mouse while holding ...
await mouse.releaseButton(Button.LEFT);
```

#### `await mouse.drag(movementFunction);`
**Purpose**: Performs a drag operation by moving the mouse while holding the left button.

**Examples**:
```javascript
// Drag to absolute coordinates
await mouse.drag(straightTo(new Point(600, 400)));

// Drag to center of a region
const dropZone = new Region(300, 300, 200, 200);
await mouse.drag(straightTo(centerOf(dropZone)));
```

#### Mouse Scrolling
```javascript
await mouse.scrollUp(amount);     // Scroll up
await mouse.scrollDown(amount);   // Scroll down  
await mouse.scrollLeft(amount);   // Scroll left
await mouse.scrollRight(amount);  // Scroll right
```

**Examples**:
```javascript
await mouse.scrollDown(5); // Scroll down 5 "ticks"
await mouse.scrollUp(3);   // Scroll up 3 "ticks"
```

#### `const position: Point = await mouse.getPosition();`
**Purpose**: Retrieves the current absolute coordinates of the mouse cursor.

**Returns**: A Point object with x and y properties.

**Example**:
```javascript
const pos = await mouse.getPosition();
console.log(`Mouse at: (${pos.x}, ${pos.y})`);
```

### Complete Mouse Examples:
```javascript
// Move to center of screen and left-click
const screenDims = await screen.width(); // Get screen width
const screenHeight = await screen.height(); // Get screen height
await mouse.move(straightTo(new Point(screenDims / 2, screenHeight / 2)));
await delay(0.5);
await mouse.click(Button.LEFT);

// Drag from (100,100) to (200,200)
await mouse.move(straightTo(new Point(100, 100)));
await delay(0.2);
await mouse.drag(straightTo(new Point(200, 200)));
await delay(0.2);

// Scroll down a webpage
await mouse.scrollDown(5);
await delay(1);
```

## ‚å®Ô∏è Core Component: keyboard
The keyboard object allows sending keyboard input, including typing text and pressing special keys or key combinations. All keyboard operations are asynchronous and must be awaited.

### Main Functions & Syntax:

#### `await keyboard.type(text: string);`
**Purpose**: Types a given string of text. This simulates typing character by character.

**Example**:
```javascript
await keyboard.type("Hello, IRIS!");
```

#### `await keyboard.pressKey(key: Key | Key[]);`
**Purpose**: Presses down one or more specified keys. For combinations, all keys are pressed simultaneously.

ALWAYS RELEASE A KEY IMMEDIATELY AFTER IT IS PRESSED, ESPECIALLY ALWAYS THE LeftSuper KEY (WINDOWS KEY). 


**Parameters**:
- `key`: Can be a single Key enum value (e.g., `Key.Enter`) or an array of Key enum values (e.g., `[Key.LeftControl, Key.C]`).

**Examples**:
```javascript
await keyboard.pressKey(Key.Enter); // Press Enter
await keyboard.pressKey([Key.LeftControl, Key.C]); // Ctrl+C
```

#### `await keyboard.releaseKey(key: Key | Key[]);`
**Purpose**: Releases one or more specified keys that were previously held down.

ALWAYS RELEASE A KEY IMMEDIATELY AFTER IT IS PRESSED, ESPECIALLY ALWAYS THE LeftSuper KEY (WINDOWS KEY). 


**Example**:
```javascript
await keyboard.releaseKey([Key.LeftControl, Key.C]);
```

### Keyboard Examples:
```javascript
// Type text into an active input field
await keyboard.type("My name is IRIS.");
await delay(0.5);

// Press Enter to submit a form
await keyboard.pressKey(Key.Enter);
await delay(1);

// Copy (Ctrl+C on Windows) - ALWAYS release after pressing combinations
await keyboard.pressKey([Key.LeftControl, Key.C]);
await delay(0.1);
await keyboard.releaseKey([Key.LeftControl, Key.C]);

// Alt+Tab to switch window
await keyboard.pressKey([Key.LeftAlt, Key.Tab]);
await delay(0.2);
await keyboard.releaseKey([Key.LeftAlt, Key.Tab]);
```

## üñ•Ô∏è Core Component: screen
The screen object provides capabilities to interact with the display, including capturing screenshots, getting pixel colors, and retrieving screen dimensions. All screen operations are asynchronous and must be awaited.

### Main Functions & Syntax:

#### `const image: Image = await screen.capture();`
**Purpose**: Captures a screenshot of the entire primary display.

**Returns**: An Image object (which is a representation of the captured image data).

**Example**:
```javascript
const fullScreenImage = await screen.capture();
```

#### `const image: Image = await screen.capture(region: Region);`
**Purpose**: Captures a screenshot of a specific rectangular region on the screen.

**Parameters**:
- `region`: A Region object (e.g., `new Region(x, y, width, height)`).

**Example**:
```javascript
const topArea = new Region(0, 0, 800, 600);
const partialScreenshot = await screen.capture(topArea);
```

#### `const color: RGBA = await screen.colorAt(point: Point);`
**Purpose**: Retrieves the RGB color of a pixel at specified coordinates.

**Parameters**:
- `point`: A Point object (e.g., `new Point(x, y)`).

**Returns**: An RGBA object with R, G, B (red, green, blue) properties (0-255) and an A (alpha) property.

**Example**:
```javascript
const pixelColor = await screen.colorAt(new Point(10, 20));
console.log(`RGB: ${pixelColor.R}, ${pixelColor.G}, ${pixelColor.B}`);
```

#### Screen Dimensions
**Note**: The exact API for getting screen dimensions may vary. Common approaches:

```javascript
// Method 1 (if available):
const screenWidth = await screen.width();
const screenHeight = await screen.height();

// Method 2 (alternative approach):
const bounds = await screen.bounds();
const screenWidth = bounds.width;
const screenHeight = bounds.height;
```

### Screen Examples:
```javascript
// Get screen dimensions and capture the top-left quarter
const screenWidth = await screen.width();
const screenHeight = await screen.height();
const quarterWidth = screenWidth / 2;
const quarterHeight = screenHeight / 2;
const topLeftQuarter = new Region(0, 0, quarterWidth, quarterHeight);
const screenshot = await screen.capture(topLeftQuarter);
await delay(0.5);

// Check color of a specific pixel
const targetX = 100;
const targetY = 50;
const pixelColor = await screen.colorAt(new Point(targetX, targetY));
console.log(`Color at (${targetX}, ${targetY}): R=${pixelColor.R}, G=${pixelColor.G}, B=${pixelColor.B}`);
await delay(0.1);
```

## üìã Core Component: clipboard
The clipboard object allows interaction with the system's copy-paste clipboard. All clipboard operations are asynchronous and must be awaited.

### Main Functions & Syntax:

#### `await clipboard.copy(text: string);`
**Purpose**: Copies the given text string to the system clipboard.

**Example**:
```javascript
await clipboard.copy("This text is copied.");
```

#### `const content: string = await clipboard.paste();`
**Purpose**: Retrieves the current text content from the system clipboard.

**Returns**: The clipboard's text content as a string.

**Example**:
```javascript
const pastedText = await clipboard.paste();
console.log("Pasted:", pastedText);
```

### Clipboard Examples:
```javascript
// Copy text, then paste it into an active application
await clipboard.copy("Hello from IRIS clipboard!");
await delay(0.2);
await keyboard.pressKey([Key.LeftControl, Key.V]); // Paste (Ctrl+V)
await delay(0.1);
await keyboard.releaseKey([Key.LeftControl, Key.V]);

// Get text from clipboard and use it
await keyboard.pressKey([Key.LeftControl, Key.C]); // Copy (Ctrl+C)
await delay(0.1);
await keyboard.releaseKey([Key.LeftControl, Key.C]);
await delay(0.2);
const copiedContent = await clipboard.paste();
console.log(`Copied content: ${copiedContent}`);
```

## üì¶ Data Types / Objects
nut.js uses specific objects to represent coordinates, regions, and input options.

### 1. Point
**Purpose**: Represents a single (x, y) coordinate on the screen.

**Syntax**: `new Point(x: number, y: number);`

**Properties**: `point.x`, `point.y`

**Example**:
```javascript
const myPoint = new Point(100, 250);
await mouse.move(straightTo(myPoint));
await delay(0.1);
```

### 2. Region
**Purpose**: Defines a rectangular area on the screen, specified by its top-left corner and its width/height.

**Syntax**: `new Region(left: number, top: number, width: number, height: number);`

**Properties**: `region.left`, `region.top`, `region.width`, `region.height`

**Example**:
```javascript
const headerRegion = new Region(0, 0, 1920, 100);
const headerScreenshot = await screen.capture(headerRegion);
await delay(0.2);
```

### 3. Button (Enum)
**Purpose**: An enumeration to specify which mouse button to use.

**Available Values**:
- `Button.LEFT` (Left mouse button)
- `Button.RIGHT` (Right mouse button)  
- `Button.MIDDLE` (Middle/wheel button)

**Example**:
```javascript
await mouse.click(Button.RIGHT); // Right-click
await delay(0.1);
```

### 4. Key (Enum)
**Purpose**: An enumeration to represent various keyboard keys. Used for pressKey and releaseKey.

**Available Values (Common)**:
- **Special Keys**: `Key.Enter`, `Key.Tab`, `Key.Escape`, `Key.Space`, `Key.BackSpace`, `Key.Delete`, `Key.Insert`, `Key.Home`, `Key.End`, `Key.PageUp`, `Key.PageDown`
- **Modifiers**: `Key.LeftControl`, `Key.RightControl`, `Key.LeftAlt`, `Key.RightAlt`, `Key.LeftShift`, `Key.RightShift`, `Key.LeftSuper` (Windows Key), `Key.RightSuper`
- **Arrow Keys**: `Key.Up`, `Key.Down`, `Key.Left`, `Key.Right`
- **Function Keys**: `Key.F1` through `Key.F24`
- **Alphanumeric**: `Key.A` through `Key.Z`, `Key.D0` through `Key.D9` (for number row), `Key.NumPad0` through `Key.NumPad9`
- **Punctuation**: `Key.Comma`, `Key.Period`, `Key.Slash`, `Key.Semicolon`, `Key.Quote`, `Key.LeftBracket`, `Key.RightBracket`, `Key.Backslash`, `Key.Minus`, `Key.Equal`, `Key.Grave` (backtick)

**Example**:
```javascript
await keyboard.pressKey([Key.LeftControl, Key.S]); // Ctrl+S (Save)
await delay(0.1);
await keyboard.releaseKey([Key.LeftControl, Key.S]);
```

## üîß Common Automation Use Cases & Examples
These examples demonstrate how to combine nut.js components and the delay function to achieve common automation tasks.

### 1. Click at a Specific Pixel Color
```javascript
async function clickAtColor(targetR, targetG, targetB, searchRegionLeft, searchRegionTop, searchRegionWidth, searchRegionHeight, tolerance = 30) {
    const searchArea = new Region(searchRegionLeft, searchRegionTop, searchRegionWidth, searchRegionHeight);
    for (let x = searchArea.left; x < searchArea.left + searchArea.width; x += 5) {
        for (let y = searchArea.top; y < searchArea.top + searchArea.height; y += 5) {
            const pixelColor = await screen.colorAt(new Point(x, y));
            const diff = Math.abs(pixelColor.R - targetR) +
                         Math.abs(pixelColor.G - targetG) +
                         Math.abs(pixelColor.B - targetB);
            if (diff <= tolerance) {
                await mouse.move(straightTo(new Point(x, y)));
                await delay(0.1);
                await mouse.click(Button.LEFT);
                return true;
            }
        }
    }
    return false;
}

// Example usage: Click a red pixel (R=255, G=0, B=0) within a 200x200 region at (100,100)
// await clickAtColor(255, 0, 0, 100, 100, 200, 200);
```

### 2. Form Field Automation
```javascript
async function fillForm(username, password, submitButtonX, submitButtonY) {
    // Click on username field
    await mouse.move(straightTo(new Point(200, 300)));
    await delay(0.5);
    await mouse.click(Button.LEFT);
    await delay(0.2);

    // Type username
    await keyboard.type(username);
    await delay(0.2);
    await keyboard.pressKey(Key.Tab);
    await delay(0.5);

    // Type password
    await keyboard.type(password);
    await delay(0.2);
    await keyboard.pressKey(Key.Tab);
    await delay(0.5);

    // Click submit button
    await mouse.move(straightTo(new Point(submitButtonX, submitButtonY)));
    await delay(0.2);
    await mouse.click(Button.LEFT);
    await delay(2);
}

// Example usage:
// await fillForm("myusername", "mypassword123", 500, 600);
```

### 3. Wait for Region Color Change
```javascript
async function waitForPixelColorChange(x, y, timeoutMs = 10000) {
    const initialColor = await screen.colorAt(new Point(x, y));
    const startTime = Date.now();
    
    while (Date.now() - startTime < timeoutMs) {
        await delay(0.5);
        const currentColor = await screen.colorAt(new Point(x, y));
        
        if (initialColor.R !== currentColor.R || 
            initialColor.G !== currentColor.G || 
            initialColor.B !== currentColor.B) {
            console.log("Pixel color changed!");
            return true;
        }
    }
    console.log("Pixel color did not change within timeout.");
    return false;
}

// Example usage: Wait for pixel at (100,100) to change color within 15 seconds
// await waitForPixelColorChange(100, 100, 15000);
```

## ‚ö° Performance Tips
Optimizing nut.js scripts is crucial for responsiveness, especially on slower systems.

### Use delay Judiciously:
- **Short delays (0.05-0.2s)**: For quick UI updates or between rapid key presses/clicks.
- **Medium delays (0.5-1s)**: For application responses, small animations, or waiting for elements to become active.
- **Long delays (2s+)**: For application loading, page transitions, or significant state changes.

**Example**:
```javascript
await keyboard.type("search term");
await delay(0.2); // Allow text to register
await keyboard.pressKey(Key.Enter);
await delay(3); // Wait for search results to load
```

### Minimize Unnecessary Movements:
Move the mouse directly to the final destination rather than multiple small incremental moves.

**Bad**:
```javascript
await mouse.move(straightTo(new Point(100, 100))); 
await mouse.move(straightTo(new Point(110, 100)));
```

**Good**:
```javascript
await mouse.move(straightTo(new Point(110, 100)));
```

### Region-based Operations for Screen:
When searching for elements or capturing screenshots, always specify the smallest possible Region if the target area is known.

**Bad**:
```javascript
const fullScreen = await screen.capture();
```

**Good**:
```javascript
const buttonArea = new Region(800, 600, 200, 100);
const screenshot = await screen.capture(buttonArea);
```

## üö® Error Handling
Always wrap your nut.js automation code in try...catch blocks to gracefully handle unexpected issues.

```javascript
async function safeAutomationExample() {
    try {
        await mouse.move(straightTo(new Point(500, 500)));
        await delay(0.2);
        await mouse.click(Button.LEFT);
        await delay(1);
        await keyboard.type("some text");
        console.log("Automation sequence completed successfully.");
    } catch (error) {
        console.error("Automation failed:", error.message);
        // Handle different error types as needed
        if (error.message.includes('permission')) {
            console.log("Permission error - check accessibility settings");
        } else if (error.message.includes('not found')) {
            console.log("Target element not found");
        } else {
            console.log("Unexpected automation error occurred");
        }
    }
}
```

## üîç Debugging Tips
When nut.js scripts don't behave as expected, these tips can help diagnose the problem.

### Visual Debugging (Log Mouse Position/Pixel Color):
```javascript
// Check current mouse position
const pos = await mouse.getPosition();
console.log(`Mouse: (${pos.x}, ${pos.y})`);

// Check a specific pixel color
const debugX = 100;
const debugY = 100;
const color = await screen.colorAt(new Point(debugX, debugY));
console.log(`Debug Pixel (${debugX}, ${debugY}): R=${color.R}, G=${color.G}, B=${color.B}`);
```

### Step-by-Step Execution (with Delays):
Insert longer delay calls between critical steps to visually observe what the automation is doing.

```javascript
await mouse.move(straightTo(new Point(100, 100)));
await delay(2); // Pause to see mouse move
await mouse.click(Button.LEFT);
await delay(3); // Pause to see click effect
await keyboard.type("test");
await delay(2); // Pause to see text appear
```

## üìù Critical Reminders for LLM Code Generation

1. **NEVER use arrays or plain objects for mouse coordinates**: Always use `straightTo(new Point(x, y))` for absolute movement or `left(pixels)`, `right(pixels)`, `up(pixels)`, `down(pixels)` for relative movement.

2. **Always release keyboard combinations**: After pressing key combinations like `[Key.LeftControl, Key.C]`, always call `releaseKey` with the same combination.

3. **Use appropriate delays**: Add delays after actions that trigger UI changes, especially after opening applications, clicking buttons, or typing into fields.

4. **Use Point objects for screen operations**: When calling `screen.colorAt()`, always pass a `new Point(x, y)`, not an array.

5. **Prefer specific regions over full screen captures**: When possible, capture specific regions rather than the entire screen for better performance.

6. **Handle errors gracefully**: Wrap automation sequences in try-catch blocks to handle potential failures.

This corrected reference should provide accurate guidance for generating proper nut.js automation code.